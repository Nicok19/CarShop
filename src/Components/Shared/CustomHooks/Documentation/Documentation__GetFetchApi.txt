GetFetchApi.js Documentation

Overview:
The GetFetchApi.js module exports a custom React hook named `useFetchProducts` designed to fetch product data from a specified API and manage the loading state, fetched data, and errors.

Details:

- **useFetchProducts Hook**
  - Purpose: To fetch product data from 'https://api.escuelajs.co/api/v1/products' and prepare it for use in a React component.
  - Returns: An object containing the following properties:
    - `products`: An array of product objects fetched from the API. Each product object is enhanced with a default image if the original product does not have any images.
    - `loading`: A boolean indicating whether the fetch operation is in progress. It starts as `true` and is set to `false` once the fetch operation is complete.
    - `error`: Stores any error that occurs during the fetch operation. It's `null` if no error occurs.

- **Implementation Details**:
  - The hook initializes three state variables using the `useState` hook:
    - `products` to store the fetched product data, initialized as an empty array.
    - `loading` to indicate whether the data is being fetched, initialized as `true`.
    - `error` to capture any errors that occur during the fetch operation, initialized as `null`.
  - It uses the `useEffect` hook to perform the fetch operation when the component mounts.
  - Inside `useEffect`, an asynchronous function `fetchData` is defined and immediately invoked.
  - `fetchData` tries to fetch data from the API. On success, it processes the data to ensure each product has an image. If a product does not have any images, a default image is assigned.
  - If the fetch operation fails, the error is caught and stored in the `error` state variable.
  - The hook returns the `products`, `loading`, and `error` state variables for use in the component that utilizes this hook.

Usage:
- Import the `useFetchProducts` hook into your React component.
- Invoke the hook to fetch product data and manage the loading state and errors within your component.
- Use the returned `products`, `loading`, and `error` data to render your component accordingly.

Example:
```javascript
import React from 'react';
import { useFetchProducts } from './GetFetchApi';

function ProductList() {
  const { products, loading, error } = useFetchProducts();

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <ul>
      {products.map(product => (
        <li key={product.id}>{product.name}</li>
      ))}
    </ul>
  );
}